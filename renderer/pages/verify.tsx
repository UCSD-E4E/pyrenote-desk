import React, { useState, useRef, useEffect, MouseEvent } from 'react'
import { createPortal } from 'react-dom'
import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image'
import styles from './verify.module.css'
import WaveSurfer from 'wavesurfer.js';
import SpectrogramPlugin from 'wavesurfer.js/dist/plugins/spectrogram';
import { skip } from 'node:test'

// GENERATED BY CHAT GPT
function createViridisColorMap() {
    // Predefined Viridis colormap (256 RGB values)
    const viridisColors = [
        [68, 1, 84], [72, 35, 116], [64, 67, 135], [52, 94, 141],
        [41, 120, 142], [32, 144, 140], [34, 167, 132], [58, 190, 117],
        [96, 208, 93], [140, 219, 69], [186, 226, 54], [233, 229, 42], [253, 231, 37]
    ];

    const colorMap = [];

    for (let i = 0; i < 256; i++) {
        // Interpolate between the predefined colors
        const t = i / 255;
        const idx = Math.floor(t * (viridisColors.length - 1));
        const nextIdx = Math.min(idx + 1, viridisColors.length - 1);
        const mix = (t * (viridisColors.length - 1)) % 1;

        const r = Math.floor((1 - mix) * viridisColors[idx][0] + mix * viridisColors[nextIdx][0]);
        const g = Math.floor((1 - mix) * viridisColors[idx][1] + mix * viridisColors[nextIdx][1]);
        const b = Math.floor((1 - mix) * viridisColors[idx][2] + mix * viridisColors[nextIdx][2]);

        //colorMap[i] = [r/256, g/256, b/256, 1];
		colorMap.push([r/256, g/256, b/256, 1]);
    }

    return colorMap;
}

const FILES_PER_PAGE = 10; // corresponds to grid in css styles
const ROWS = 5;
const COLS = 2;

const spectrograms = []
let spectrogramPlaying = -1;
const DEFAULT_SKIPINTERVAL = 2;
const DEFAULT_PLAYSPEED = 1;

const Spectrogram = ({id, filePath, onMouseEnter, onMouseLeave}) => {
	const wavesurferRef = useRef(null);
	const containerRef = useRef(null);
	const innerRef = useRef(null);
	const [isRed, setIsRed] = useState(false);
	const [isSelected, setIsSelected] = useState(false);
	const [isLoaded, setIsLoaded] = useState(false);

	const toggleRed = () => {
		setIsRed(prev => !prev);
	};
	const toggleSelected = (S) => {
		setIsSelected(S);
	};
	const playPause = (playSpeed = 1) => {
		if (spectrogramPlaying != -1 && spectrogramPlaying != id) {
			spectrograms[spectrogramPlaying].ws.pause();
			spectrograms[spectrogramPlaying].ws.setTime(0);
		}
		wavesurferRef.current.setPlaybackRate(playSpeed);
		wavesurferRef.current.playPause();
		console.log(wavesurferRef.current.getPlaybackRate(), playSpeed);
		spectrogramPlaying = id;
	}

	useEffect(() => {
		if (!wavesurferRef.current) {;
			wavesurferRef.current = WaveSurfer.create({
				container: innerRef.current,//`#waveform-${id}`,
				height: 0,
				fillParent: true,
				progressColor: 'white',
				cursorColor: 'yellow',
				cursorWidth: 2,
			});
			wavesurferRef.current.registerPlugin(
				SpectrogramPlugin.create({
					colorMap: createViridisColorMap(),
					height: 256,
					fftSamples: 1024,
				}),
			)

			wavesurferRef.current.load(filePath);
			wavesurferRef.current.on('ready', function() {
				document.getElementById(`loading-spinner-${id}`).style.display = 'none';
				setIsLoaded(true);
				console.log(id);
			});
		}

		spectrograms[id] = {
			id: id,
			ws: wavesurferRef.current,
			container: innerRef.current,
			isRed: isRed,
			toggleRed: toggleRed,
			toggleSelected: toggleSelected,
			playPause: playPause,
		};

		return () => { wavesurferRef.current.destroy(); };
	}, []);

	// left click reposition functionality already handled by wavesurfer
	const rightClickPlayPause = (e: MouseEvent) => { e.preventDefault(); playPause(); }

	return (
		<div 
			key={id} 
			className={`
				${styles.waveContainer} 
				${isLoaded && (isRed ? styles.redOutline : styles.greenOutline)}
				${isLoaded && (isSelected ? styles.selectOutline : styles.unselectOutline)}
			`}
			ref={containerRef}
			onMouseEnter={onMouseEnter}
			onMouseLeave={onMouseLeave}
		>
			<div id={`loading-spinner-${id}`} className={styles.waveLoadingCircle}></div>
			<div 
				id={`waveform-${id}`} 
				ref={innerRef}
				style={{ width: "100%", height: "128px"}} 
				onContextMenu={rightClickPlayPause}
			></div>
		</div>	
	)
}


export default function VerifyPage() {	

	// STRUCTURE

	const [audioFiles, setAudioFiles] = useState([]);
	const [currentPage, setCurrentPage] = useState(1);
	const [forceReloadKey, setForceReloadKey] = useState(0);
	const handleFileSelection = (event) => {
        const selectedFiles = Array.from(event.target.files).map((file: File) => URL.createObjectURL(file));
        setAudioFiles(selectedFiles);
        setCurrentPage(1); // Reset to first page
        setForceReloadKey(prev => prev + 1); // Force re-render
    };

	const totalPages = Math.ceil(audioFiles.length / FILES_PER_PAGE);
	const currentFiles = audioFiles.slice((currentPage-1)*FILES_PER_PAGE, (currentPage)*FILES_PER_PAGE); 
	const numFiles = currentFiles.length;
	const numRows = Math.ceil(numFiles / COLS);
	const numSpots = numRows * COLS;

	const nextPage = () => {
		if (currentPage < totalPages) {
			setCurrentPage((prev) => Math.min(prev + 1, totalPages));
			setForceReloadKey((prev) => prev + 1);
		}
	}
	const prevPage = () => {
		if (currentPage > 1) {
			setCurrentPage((prev) => Math.max(prev - 1, 1));
			setForceReloadKey((prev) => prev + 1);
		}
	}

	// SELECTION
	
	const [selectedSpectrogram, setSelectedSpectrogram] = useState(null);
	let frozenSelection = false;

	const setSelected = (i) => { // wraps setSelectedSpectrogram
		console.log("setselected: ", i, frozenSelection);
		if (!frozenSelection) {
			setSelectedSpectrogram((prev) => {
				if (prev != null) {
					spectrograms[prev].toggleSelected(false);
				}
				
				if (i != null) {
					spectrograms[i].toggleSelected(true);
				}
				return i;
			})
		}
	}

	// MODAL

	const [showModal, setShowModal] = useState(false);
	const toggleModal = () => {  // wraps setShowModal
		console.log("toggle modal: ", selectedSpectrogram, frozenSelection);
		if (selectedSpectrogram != null) {
			setShowModal((prev) => {
				frozenSelection = !prev;
				if (prev) { // EXIT MODAL
					return false;
				} else { // SHOW MODAL
					if (spectrogramPlaying != -1) {
						spectrograms[spectrogramPlaying].ws.pause();
					}
					return true;
				}
			});
		}		
	}

	useEffect(() => {
		if (showModal) {
			document.getElementById("container").classList.add(styles.noInteraction);
		} else {
			document.getElementById("container").classList.remove(styles.noInteraction);
		}
	}, [showModal]);

	function PortalContent() {
		return (
			<div className={styles.modal}>
				<div>{selectedSpectrogram}</div>
				<button onClick={toggleModal}>Close</button>
			</div>
		);
	}

	// SETTINGS

	const [playSpeed, setPlaySpeed] = useState(DEFAULT_PLAYSPEED);
	const [skipInterval, setSkipInterval] = useState(DEFAULT_SKIPINTERVAL);

	// ACTIONS

	{ // defining functions and handling keyboard controls
		const moveSelectionUp = () => { setSelected(Math.max(selectedSpectrogram - COLS, selectedSpectrogram % COLS)); }
		const moveSelectionDown = () => { setSelected(Math.min(selectedSpectrogram + COLS, numFiles-1, numSpots-COLS+(selectedSpectrogram % COLS))); }
		const moveSelectionLeft = () => { setSelected(Math.max(selectedSpectrogram - 1, 0)); }
		const moveSelectionRight = () => { setSelected(Math.min(selectedSpectrogram + 1, numFiles-1)) }
		const toggleValidity = () => { if (selectedSpectrogram != null) {spectrograms[selectedSpectrogram].toggleRed();} }
		const playPauseSelection = () => { if (selectedSpectrogram != null) {spectrograms[selectedSpectrogram].playPause();} }
		const skipBack = () => { if (selectedSpectrogram != null) {spectrograms[selectedSpectrogram].ws.skip(-skipInterval);} }
		const skipForward = () => { if (selectedSpectrogram != null) {spectrograms[selectedSpectrogram].ws.skip(skipInterval);} } 
		const doubleSkipInterval = () => { setSkipInterval((prev) => prev*2) } 
		const halveSkipInterval = () => { setSkipInterval((prev) => prev/2) } 
		const doublePlaySpeed = () => { setPlaySpeed((prev) => {let p = Math.min(2, prev*2); if (spectrogramPlaying != -1) {spectrograms[spectrogramPlaying].ws.setPlaybackRate(p)}; return p;}); }
		const halvePlaySpeed = () => { setPlaySpeed((prev) => {let p = Math.max(0.25, prev/2); if (spectrogramPlaying != -1) {spectrograms[spectrogramPlaying].ws.setPlaybackRate(p)}; return p;}); }
		const resetIncrements = () => { setSkipInterval(DEFAULT_SKIPINTERVAL); setPlaySpeed(DEFAULT_PLAYSPEED); if (spectrogramPlaying != -1) {spectrograms[spectrogramPlaying].ws.setPlaybackRate(DEFAULT_PLAYSPEED)}; }

		const keybinds = {
			"w": moveSelectionUp,
			"a": moveSelectionLeft,
			"s": moveSelectionDown,
			"d": moveSelectionRight,
			"/": toggleValidity,
			" ": playPauseSelection,
			",": skipBack,
			".": skipForward,
			"l": doubleSkipInterval,
			"k": halveSkipInterval,
			"m": doublePlaySpeed,
			"n": halvePlaySpeed,
			"r": resetIncrements,
			"x": toggleModal,
			"Enter": nextPage,
			"Backspace": prevPage,
		}

		useEffect(() => {
			const handleKeyDown = (event) => {
				if (event.key == " ") {
					event.preventDefault(); 
				}
				console.log(event.key);
				const func = keybinds[event.key];				
				if (func) {
					func();
				}
			};

			window.addEventListener("keydown", handleKeyDown);
			return () => window.removeEventListener("keydown", handleKeyDown);
		}, [selectedSpectrogram, spectrogramPlaying, playSpeed, skipInterval]);
	}
	
	return (
		<React.Fragment>
			<Head>
				<title>Verify Page</title>
			</Head>
			<div id="container" className={styles.container}>
				<div className = {styles.verifyContent}>
					<div className = {styles.verifyButtonMenu}>
						<input type="file" multiple onChange={handleFileSelection} />
						{audioFiles.length > 0 && (
							<>
								<div className={styles.nextFiles} onClick={nextPage}>
									<Image
									src="/images/RArrow.png"
									alt="Next files"
									width={45}
									height={45}
									/>
									
								</div>
								<div className={styles.prevFiles} onClick={prevPage}>
									<Image
									src="/images/LArrow.png"
									alt="Previous files"
									width={45}
									height={45}
									/>
									
								</div>
							</>
						)}
						<div>
							<p>Skip Interval: {skipInterval}</p>
							<p>Playback Speed: {playSpeed}</p>
						</div>
					</div>

					{audioFiles.length > 0 && (
						<>
							<div key={forceReloadKey} className={styles.grid}>
								{currentFiles.map((filePath, i) => (
									<Spectrogram 
										key={i}
										id={i} 
										filePath={filePath} 
										onMouseEnter={() => {
											setSelected(i);
										}}
										onMouseLeave={() => {
											setSelected(null);
										}}
									/>
								))}
							</div>
						</>
					)}

					{showModal && createPortal(
						<PortalContent />,
						document.body
					)}
				</div>
			</div>
		</React.Fragment>
	)
}