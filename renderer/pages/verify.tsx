import React, { useState, useRef, useEffect, MouseEvent, useCallback, useImperativeHandle, forwardRef } from 'react'
import { createPortal } from 'react-dom'
import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image'
import styles from './verify.module.css'
import WaveSurfer from 'wavesurfer.js';
import SpectrogramPlugin from 'wavesurfer.js/dist/plugins/spectrogram';
import { skip } from 'node:test'
import { link } from 'fs'

// GENERATED BY CHAT GPT
function createViridisColorMap() {
    // Predefined Viridis colormap (256 RGB values)
    const viridisColors = [
        [68, 1, 84], [72, 35, 116], [64, 67, 135], [52, 94, 141],
        [41, 120, 142], [32, 144, 140], [34, 167, 132], [58, 190, 117],
        [96, 208, 93], [140, 219, 69], [186, 226, 54], [233, 229, 42], [253, 231, 37]
    ];

    const colorMap = [];

    for (let i = 0; i < 256; i++) {
        // Interpolate between the predefined colors
        const t = i / 255;
        const idx = Math.floor(t * (viridisColors.length - 1));
        const nextIdx = Math.min(idx + 1, viridisColors.length - 1);
        const mix = (t * (viridisColors.length - 1)) % 1;

        const r = Math.floor((1 - mix) * viridisColors[idx][0] + mix * viridisColors[nextIdx][0]);
        const g = Math.floor((1 - mix) * viridisColors[idx][1] + mix * viridisColors[nextIdx][1]);
        const b = Math.floor((1 - mix) * viridisColors[idx][2] + mix * viridisColors[nextIdx][2]);

        //colorMap[i] = [r/256, g/256, b/256, 1];
		colorMap.push([r/256, g/256, b/256, 1]);
    }

    return colorMap;
}

const FILES_PER_PAGE = 10; // corresponds to grid in css styles
const ROWS = 5;
const COLS = 2;

const DEFAULT_SKIPINTERVAL = 2;
const DEFAULT_PLAYSPEED = 1;

interface SpectroRef {
	id: number,
	wavesurferRef: React.RefObject<WaveSurfer>;
	isRed: boolean;
	isSelected: boolean;
	isLoaded: boolean;
	filePath: URL;
	toggleRed: () => void;
	toggleSelected: (selected) => void;
	playPause: () => boolean;
	setPlaybackRate: (number) => void;
	play: () => void;
	pause: () => void;
	setTime: (number) => void;
	getTime: () => number;
	skip: (number) => void;
}

interface SpectroProps {
	id : number,
	filePath : URL,
	onMouseEnter : ()=>void, 
	onMouseLeave : ()=>void,
	playSpeedRef : React.RefObject<number>,
	linkedSpectro : SpectroRef
}

const Spectrogram = forwardRef<SpectroRef, SpectroProps>(({ 
	id, // -1 if modal 
	filePath, 
	onMouseEnter, 
	onMouseLeave,
	playSpeedRef,
	linkedSpectro=null,
}, ref) => {
	const wavesurferRef = useRef(null);
	const containerRef = useRef(null);
	const innerRef = useRef(null);
	const [isRed, setIsRed] = useState(false);
	const [isSelected, setIsSelected] = useState(false);
	const [isLoaded, setIsLoaded] = useState(false);

	const setPlaybackRate = (playSpeed = playSpeedRef.current) => {
		wavesurferRef.current.setPlaybackRate(playSpeed);
	}
	const playPause = () => {
		setPlaybackRate();
		wavesurferRef.current.playPause();
		return wavesurferRef.current.isPlaying;
	}
	const rightClickPlayPause = (e: MouseEvent) => { e.preventDefault(); playPause(); }

	console.log("rerun ", id);
	useImperativeHandle(ref, ()=>{
		return { // SpectroRef
			id,
			wavesurferRef,
			isRed,
			isSelected,
			isLoaded,
			filePath,
			toggleRed: () => { setIsRed(prev => !prev); },
			toggleSelected: (S) => { setIsSelected(S); },
			setPlaybackRate,
			playPause,
			play: () => { wavesurferRef.current.play(); },
			pause: () => { wavesurferRef.current.pause(); },
			setTime: (time) => { wavesurferRef.current.setTime(time) },
			getTime: () => { return wavesurferRef.current.getCurrentTime() },
			skip: (time) => {wavesurferRef.current.skip(time) },
		}
	});

	useEffect(() => {
		if (!wavesurferRef.current) {;
			wavesurferRef.current = WaveSurfer.create({
				container: innerRef.current,
				height: 0,
				fillParent: true,
				progressColor: 'white',
				cursorColor: 'yellow',
				cursorWidth: 2,
				sampleRate: 16000,
			});
			wavesurferRef.current.registerPlugin(
				SpectrogramPlugin.create({
					colorMap: createViridisColorMap(),
					
					scale: "linear",
					fftSamples: (id==-1) ? 512 : 256, // 2 * height
					labels: (id==-1),
				}),
			)

			wavesurferRef.current.load(filePath);
			wavesurferRef.current.on('ready', function() {
				document.getElementById(`loading-spinner-${id}`).style.display = 'none';

				if (linkedSpectro) {
					wavesurferRef.current.setTime(linkedSpectro.getTime());
					wavesurferRef.current.on("timeupdate", (progress) => {
						linkedSpectro.setTime(progress);
					});
				}
				setIsLoaded(true);
			});

			setIsRed(linkedSpectro?.isRed);
		}
		
		return () => { 
			wavesurferRef.current.destroy(); 
		};
	}, []);

	// left click reposition functionality already handled by wavesurfer
	
	return (
		<div 
			key={id} 
			className={`
				${(id==-1) ? styles.waveContainerBig : styles.waveContainer} 
				${isLoaded && (isRed ? styles.redOutline : styles.greenOutline)}
				${isLoaded && (isSelected ? styles.selectOutline : styles.unselectOutline)}
			`}
			ref={containerRef}
			onMouseEnter={onMouseEnter}
			onMouseLeave={onMouseLeave}
		>
			<div id={`loading-spinner-${id}`} className={styles.waveLoadingCircle}></div>
			<div 
				id={`waveform-${id}`} 
				ref={innerRef}
				style={{ width: "100%", height: "128px"}} 
				onContextMenu={rightClickPlayPause}
			></div>
		</div>	
	)
});


export default function VerifyPage() {	

	// PAGE SETUP
	
	const [audioFiles, setAudioFiles] = useState([]);
	const [currentPage, setCurrentPage] = useState(1);
	const [forceReloadKey, setForceReloadKey] = useState(0); // crucial for switching pages	
	const handleFileSelection = (event) => {
		const selectedFiles = Array.from(event.target.files).map((file: File) => URL.createObjectURL(file));
		setAudioFiles(selectedFiles);
		setCurrentPage(1); // Reset to first page
	};

	const totalPages = Math.ceil(audioFiles.length / FILES_PER_PAGE);
	const currentFiles = audioFiles.slice((currentPage-1)*FILES_PER_PAGE, (currentPage)*FILES_PER_PAGE); 
	const numFiles = currentFiles.length;
	const numRows = Math.ceil(numFiles / COLS);
	const numSpots = numRows * COLS;

	const nextPage = () => {
		if (currentPage < totalPages) {
			setCurrentPage((prev) => Math.min(prev + 1, totalPages));
			setForceReloadKey((prev) => prev + 1);
		}
	}
	const prevPage = () => {
		if (currentPage > 1) {
			setCurrentPage((prev) => Math.max(prev - 1, 1));
			setForceReloadKey((prev) => prev + 1);
		}
	}
	
	// SPECTROGRAM

	const spectrograms = useRef([]);
	const playingSpectro = useRef(null);
	const selectedSpectro = useRef(null);
	const [frozen, setFrozen] = useState(false);
	const [mouseControl, setMouseControl] = useState(true);

	const setSelected = useCallback((i) => { // wraps setSelectedSpectrogram
		if (!frozen) {
			if (selectedSpectro.current != null) {
				spectrograms.current[selectedSpectro.current].toggleSelected(false);
			}
			selectedSpectro.current = i;
			
			if (i != null) {
				spectrograms.current[i].toggleSelected(true);
			}
			return i;
		}
	}, [frozen]);

	// MODAL

	const [showModal, setShowModal] = useState(false);
	const toggleModal = useCallback(() => {  // wraps setShowModal
		//console.log("toggle modal: ", selectedSpectrogram, frozen);
		if (selectedSpectro.current != null) {
			setShowModal((prev) => {
				setFrozen(!prev);
				if (prev) { // EXIT MODAL
					playingSpectro.current = null;
					return false;
				} else { // SHOW MODAL
					if (playingSpectro.current != null) {
						spectrograms.current[playingSpectro.current].pause();
					}
					return true;
				}
			});
		}		
	}, [selectedSpectro, frozen]);

	useEffect(() => {
		if (showModal) {
			document.getElementById("container").classList.add(styles.noInteraction);
		} else {
			document.getElementById("container").classList.remove(styles.noInteraction);
		}
	}, [showModal]);

	const PortalContent = () => {
		return (
			<div className={styles.modal}>
				<div>{selectedSpectro.current}</div>
				<Spectrogram 
					key={-1}
					id={-1} 
					filePath={spectrograms.current[selectedSpectro.current].filePath} 
					onMouseEnter={() => {
						if (mouseControl) {
							setSelected(-1);
						}
					}}
					onMouseLeave={() => {
						if (mouseControl) {
							setSelected(null);
						}
					}}
					playSpeedRef={playSpeedRef}
					linkedSpectro={spectrograms.current[selectedSpectro.current]}
					ref={(el) => {
						if (el) spectrograms.current[-1] = el; // Populate dynamically
					}}
				/>
				<button onClick={toggleModal}>Close</button>
			</div>
		);
	}

	// SETTINGS

	const [skipInterval, setSkipInterval] = useState(DEFAULT_SKIPINTERVAL);
	const [playSpeed, setPlaySpeed] = useState(DEFAULT_PLAYSPEED);
	const playSpeedRef = useRef(playSpeed);

	// ACTIONS

	{ // defining functions and handling keyboard controls
		const moveSelectionUp = () => { setSelected(Math.max(selectedSpectro.current - COLS, selectedSpectro.current % COLS)); setMouseControl(false);}
		const moveSelectionDown = () => { setSelected(Math.min(selectedSpectro.current + COLS, numFiles-1, numSpots-COLS+(selectedSpectro.current % COLS))); setMouseControl(false);}
		const moveSelectionLeft = () => { setSelected(Math.max(selectedSpectro.current - 1, 0)); setMouseControl(false);}
		const moveSelectionRight = () => { setSelected(Math.min(selectedSpectro.current + 1, numFiles-1)); setMouseControl(false);}
		const toggleValidity = () => { 
			if (selectedSpectro.current != null) {spectrograms.current[selectedSpectro.current].toggleRed();}; 
			if (showModal) {spectrograms.current[-1].toggleRed();}
		}
		const playPauseSelection = () => { 
			if (selectedSpectro.current == null) { return };
			if (playingSpectro.current != null && playingSpectro.current != selectedSpectro.current) { spectrograms.current[playingSpectro.current].pause(); };
			const isPlaying = spectrograms.current[showModal ? -1 : selectedSpectro.current].playPause(); 
			playingSpectro.current = (isPlaying ? selectedSpectro.current : null);
		}
		const skipBack = () => { if (selectedSpectro.current != null) {spectrograms.current[showModal ? -1 : selectedSpectro.current].skip(-skipInterval);}; }
		const skipForward = () => { if (selectedSpectro.current != null) {spectrograms.current[showModal ? -1 : selectedSpectro.current].skip(skipInterval);}; } 
		const doubleSkipInterval = () => { setSkipInterval((prev) => prev*2) } 
		const halveSkipInterval = () => { setSkipInterval((prev) => prev/2) } 
		const doublePlaySpeed = () => { 
			setPlaySpeed((prev) => {
				let p = Math.min(2, prev*2); 
				if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(p)}; 
				return p;
			}); 
		}
		const halvePlaySpeed = () => { 
			setPlaySpeed((prev) => {
				let p = Math.max(0.25, prev/2); 
				if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(p)}; 
				return p;
			}); 
		}
		const resetIncrements = () => { 
			setSkipInterval(DEFAULT_SKIPINTERVAL); 
			setPlaySpeed(DEFAULT_PLAYSPEED); 
			if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(DEFAULT_PLAYSPEED)}; 
		}

		const keybinds = {
			"w": moveSelectionUp,
			"a": moveSelectionLeft,
			"s": moveSelectionDown,
			"d": moveSelectionRight,
			"/": toggleValidity,
			" ": playPauseSelection,
			",": skipBack,
			".": skipForward,
			"l": doubleSkipInterval,
			"k": halveSkipInterval,
			"m": doublePlaySpeed,
			"n": halvePlaySpeed,
			"r": resetIncrements,
			"o": toggleModal,
			"Enter": nextPage,
			"Backspace": prevPage,
		}

		useEffect(() => { // handle keyboard input
			const handleKeyDown = (event) => {
				if (event.key == " ") {
					event.preventDefault(); 
				}
				console.log(event.key);
				const func = keybinds[event.key];				
				if (func) {
					func();
				}
			};

			window.addEventListener("keydown", handleKeyDown);
			return () => window.removeEventListener("keydown", handleKeyDown);
		}, [selectedSpectro, playingSpectro, playSpeed, skipInterval, frozen]);
	}
	
	return (
		<React.Fragment>
			<Head>
				<title>Verify Page</title>
			</Head>
			<div id="container" className={styles.container} onMouseMove={() => {if (!frozen) setMouseControl(true)}}>
				<div className = {styles.verifyContent}>
					<div className = {styles.verifyButtonMenu}>
						<input type="file" multiple onChange={handleFileSelection} />
						{audioFiles.length > 0 && (
							<>
								<div className={styles.nextFiles} onClick={nextPage}>
									<Image
									src="/images/RArrow.png"
									alt="Next files"
									width={45}
									height={45}
									/>
									
								</div>
								<div className={styles.prevFiles} onClick={prevPage}>
									<Image
									src="/images/LArrow.png"
									alt="Previous files"
									width={45}
									height={45}
									/>
									
								</div>
							</>
						)}
						<div>
							<p>Skip Interval: {skipInterval}</p>
							<p>Playback Speed: {playSpeed}</p>
						</div>
					</div>

					{audioFiles.length > 0 && (
						<>
							<div key={forceReloadKey} className={styles.grid}>
								{currentFiles.map((filePath, i) => (
									<Spectrogram 
										key={i}
										id={i} 
										filePath={filePath} 
										onMouseEnter={() => {
											if (mouseControl) {
												setSelected(i);
											}
										}}
										onMouseLeave={() => {
											if (mouseControl) {
												setSelected(null);
											}
										}}
										playSpeedRef={playSpeedRef}
										linkedSpectro={null}
										ref={(el) => {
											if (el) spectrograms.current[i] = el; // Populate dynamically
										}}
									/>
								))}
							</div>
						</>
					)}

					{showModal && createPortal(
						<PortalContent />,
						document.body
					)}
				</div>
			</div>
		</React.Fragment>
	)
}