import React, { useState, useRef, useEffect, MouseEvent, useCallback, useImperativeHandle, forwardRef } from 'react'
import { createPortal } from 'react-dom'
import Head from 'next/head'
import Image from 'next/image'
import styles from './verify.module.css'
import WaveSurfer from 'wavesurfer.js';
import SpectrogramPlugin from 'wavesurfer.js/dist/plugins/spectrogram';

import { ipcMain } from 'electron'
import { link, writeFileSync } from 'fs'
import { ALL } from 'dns'

// GENERATED BY CHAT GPT
function VIRIDIS_COLORMAP() {
    const viridisColors = [
        [68, 1, 84], [72, 35, 116], [64, 67, 135], [52, 94, 141],
        [41, 120, 142], [32, 144, 140], [34, 167, 132], [58, 190, 117],
        [96, 208, 93], [140, 219, 69], [186, 226, 54], [233, 229, 42], [253, 231, 37]
    ];
    const colorMap = [];
    for (let i = 0; i < 256; i++) {
        const t = i / 255;
        const idx = Math.floor(t * (viridisColors.length - 1));
        const nextIdx = Math.min(idx + 1, viridisColors.length - 1);
        const mix = (t * (viridisColors.length - 1)) % 1;
        const r = Math.floor((1 - mix) * viridisColors[idx][0] + mix * viridisColors[nextIdx][0]);
        const g = Math.floor((1 - mix) * viridisColors[idx][1] + mix * viridisColors[nextIdx][1]);
        const b = Math.floor((1 - mix) * viridisColors[idx][2] + mix * viridisColors[nextIdx][2]);
		colorMap.push([r/256, g/256, b/256, 1]);
    }
    return colorMap;
}

const MAX_SKIPINTERVAL = 8;
const DEFAULT_SKIPINTERVAL = 2;
const MIN_SKIPINTERVAL = 0.5

const MAX_PLAYSPEED = 4;
const DEFAULT_PLAYSPEED = 1;
const MIN_PLAYSPEED = 0.25;

const MAX_COLUMNS = 8;
const DEFAULT_COLUMNS = 2;
const MIN_COLUMNS = 1;

enum SpectroStatus {
	Unverified,
	Valid,
	Invalid,
}

interface SpectroRef {
	id: number,
	fullIndex: number,
	wavesurferRef: React.RefObject<WaveSurfer>;
	status: number;
	isSelected: boolean;
	isLoaded: boolean;
	filePath: string;
	url: string;
	setStatus: (status) => void;
	setIsSelected: (selected) => void;
	playPause: () => boolean;
	setPlaybackRate: (number) => void;
	play: () => void;
	pause: () => void;
	setTime: (number) => void;
	getTime: () => number;
	skip: (number) => void;
}
interface SpectroProps {
	id : number,
	fullIndex : number,
	url : string,
	status: number,
	onMouseEnter : ()=>void, 
	onMouseLeave : ()=>void,
	linkedSpectro : SpectroRef,
	filePath? : string,
}
interface SaveData {
	table: {
		filePath: string;
		status: SpectroStatus;
	}[]
}
interface ProcessedAudioFile {
	index: number;
	url: string;
	filePath: string;
	status: SpectroStatus;
}


export default function VerifyPage() {	

	// SPECTROGRAMS and PAGE SETUP

	const spectrograms = useRef([]);
	const playingSpectro = useRef(null);
	const [frozen, setFrozen] = useState(false);
	const [mouseControl, setMouseControl] = useState(true);

	const [skipInterval, setSkipInterval] = useState(DEFAULT_SKIPINTERVAL);
	const [playSpeed, setPlaySpeed] = useState(DEFAULT_PLAYSPEED);
	
	const [selected, setSelected] = useState(null);
	const updateSelected = useCallback((i) => { // wraps setSelectedSpectrogram
		if (!(frozen && mouseControl)) {
			if (selected != null) {
				spectrograms.current[selected].setIsSelected(false);
			}
			setSelected(i);

			if (i != null && i >= 0) {
				spectrograms.current[i].setIsSelected(true);

				if (frozen) {
					toggleModal();
					toggleModal();
				}
			}
			
			return i;
		}
	}, [frozen, playSpeed, selected]);

	
	const [ROWS, setROWS] = useState(5); // try not to change this (spectrogram height is not very flexible)
	const [COLS, setCOLS] = useState(DEFAULT_COLUMNS);
	const FILES_PER_PAGE = ROWS*COLS;
	
	// persistent storage of spectrogram data
	const [[audioFiles, setAudioFiles], updateAudioFile] = [useState<ProcessedAudioFile[]>([]), (i, status) => {
		setAudioFiles(prevItems => {
			const newItems = [...prevItems]; // make a copy
			newItems[i].status = status;      // update the element
			return newItems;                 // set new array
		});
	}]; 

	const [currentPage, setCurrentPage] = useState(1);
	const [forceReloadKey, setForceReloadKey] = useState(0); // crucial for switching pages	
	
	const totalPages = Math.ceil(audioFiles.length / FILES_PER_PAGE);
	const currentFiles = audioFiles.slice((currentPage-1)*FILES_PER_PAGE, (currentPage)*FILES_PER_PAGE); 
	const numFiles = currentFiles.length;
	const numRows = Math.ceil(numFiles / COLS);
	const numSpots = numRows * COLS;

	const ALLOWED_FILE_TYPES = [
		"audio/mp3", "audio/wav", 
		"text/plain", "application/json"
	];

	async function handleFileSelectionNew() {
		let processed : ProcessedAudioFile[] = []

		async function handleAudioFile(file, status=SpectroStatus.Unverified) {
			if (file.extension == ".wav") { // audio file
				const blob = new Blob([file.data], {type: 'audio/wav'})
				processed.push({
					index: processed.length, 
					url: URL.createObjectURL(blob), 
					filePath: file.filePath, 
					status: status
				});

			} else if (file.extension == ".mp3") {
				const blob = new Blob([file.data], {type: 'audio/mpeg'})
				processed.push({
					index: processed.length, 
					url: URL.createObjectURL(blob), 
					filePath: file.filePath, 
					status: status
				});

			}
		}

		async function processInput(files) {
			const tasks = files.map(async (file, i) => {	
				if (file.extension == ".json") { // json file
					const jsonString = new TextDecoder("utf-8").decode(file.data);
					const jsonData : SaveData = JSON.parse(jsonString);

					for (let j = 0; j < jsonData.table.length; j++) {
						const entry = jsonData.table[j];
						const audioFile = await window.ipc.invoke('read-file-for-verification', entry.filePath);
						await handleAudioFile(audioFile, entry.status);
					}
				} else {
					await handleAudioFile(file);
				}
			})
			await Promise.all(tasks);
			return processed;
		}
		
		const files = await window.ipc.invoke('pick-files-for-verification', null);
		
		processed = await processInput(files);
		setAudioFiles(processed);
		setCurrentPage(1); // Reset to first page
	};

	const Spectrogram = useCallback(forwardRef<SpectroRef, SpectroProps>(({ 
		id, // -1 if modal 
		fullIndex,
		url: url, 
		status: _status,
		onMouseEnter, 
		onMouseLeave,
		linkedSpectro=null,
		filePath: filePath=null,
	}, ref) => {
		const wavesurferRef = useRef(null);
		const containerRef = useRef(null);
		const innerRef = useRef(null);
		const [status, setStatus] = useState(_status);
		const [isSelected, setIsSelected] = useState(false);
		const [isLoaded, setIsLoaded] = useState(false);

		const setPlaybackRate = (playSpeed) => {
			console.log(playSpeed);
			wavesurferRef.current.setPlaybackRate(playSpeed);
		}
		const playPause = (playbackRate=null) => {
			if (playbackRate != null) {
				setPlaybackRate(playbackRate);
			}
			wavesurferRef.current.playPause();
			return wavesurferRef.current.isPlaying;
		}
		const rightClickPlayPause = (e: MouseEvent) => { e.preventDefault(); playPause(); }
		
		useImperativeHandle(ref, ()=>{ // exposed functions
			return { // SpectroRef
				id,
				fullIndex,
				wavesurferRef,
				status,
				isSelected,
				isLoaded,
				filePath,
				url,
				setStatus,
				setIsSelected,
				setPlaybackRate,
				playPause,
				play: () => { wavesurferRef.current.play(); },
				pause: () => { wavesurferRef.current.pause(); },
				setTime: (time) => { wavesurferRef.current.setTime(time) },
				getTime: () => { return wavesurferRef.current.getCurrentTime() },
				skip: (time) => {wavesurferRef.current.skip(time) },
			}
		});
		
		//console.log(status)
		useEffect(() => { // initialize
			setStatus(_status);

			//if (!wavesurferRef.current) {
			wavesurferRef.current = WaveSurfer.create({	
				container: innerRef.current,
				height: 0,
				fillParent: true,
				progressColor: 'white',
				cursorColor: 'yellow',
				cursorWidth: 2,
				sampleRate: 16000,
			});
			wavesurferRef.current.registerPlugin(
				SpectrogramPlugin.create({
					colorMap: 'gray',
					scale: "linear",
					fftSamples: (id==-1) ? 512 : 64, // 2 * height
					labels: (id==-1),
					height: (id==-1) ? 256 : 128,
				}),
			)
			
			wavesurferRef.current.load(url);
			wavesurferRef.current.on('ready', function() {
				document.getElementById(`loading-spinner-${id}`).style.display = 'none';

				if (linkedSpectro) {
					wavesurferRef.current.setTime(linkedSpectro.getTime());
					wavesurferRef.current.on("timeupdate", (progress) => {
						linkedSpectro.setTime(progress);
					});
				}
				setIsLoaded(true);
			});
			//}
			
			return () => { 
				wavesurferRef.current.unAll();
				wavesurferRef.current.destroy(); 
			};
		}, [url]);
	
		return (
			<div 
				key={id} 
				className={`
					${(id==-1) ? styles.waveContainerModal : styles.waveContainer} 
					${isLoaded && (
						(status==SpectroStatus.Valid && styles.greenOutline) || 
						(status==SpectroStatus.Invalid && styles.redOutline)
					)}
					${isLoaded && (isSelected ? styles.selectOutline : styles.unselectOutline)}
				`}
				ref={containerRef}
				onMouseEnter={onMouseEnter}
				onMouseLeave={onMouseLeave}
				style={{ position: "relative" }}
			> 
				{id!=-1 && (<div className={styles.indexOverlay}>{fullIndex+1}</div>)} 
				<div id={`loading-spinner-${id}`} className={styles.waveLoadingCircle}></div>
				<div 
					id={`waveform-${id}`} 
					ref={innerRef}
					style={{ width: "100%", height: "256px"}} // the height doesnt matter, it's predetermined by FFT
					onContextMenu={rightClickPlayPause}
				></div>
			</div>	
		)
	}), []);
	
	const ModalSpectrogram = useCallback(forwardRef<SpectroRef, SpectroProps&{toggleModal:()=>void}>(({
		id, // -1 if modal 
		fullIndex=-1,
		url, 
		onMouseEnter, 
		onMouseLeave,
		linkedSpectro=spectrograms.current[selected],
		toggleModal,
	}, ref) => {
		const modalRef = useRef(null);
		return (
			<div ref={modalRef} className={styles.modal}>
				<div className={styles.indexOverlay}>{linkedSpectro.fullIndex+1}</div>
				<Spectrogram 
					id={-1} 
					fullIndex={fullIndex}
					url={url} 
					status={linkedSpectro.status}
					onMouseEnter={onMouseEnter}
					onMouseLeave={onMouseLeave}
					linkedSpectro={linkedSpectro}
					ref={ref}
				/>
				<button onClick={toggleModal}>Close</button>
			</div>
		);
	}), [selected]);


	// MODAL

	const [showModal, setShowModal] = useState(false);
	const toggleModal = useCallback(() => {  // wraps setShowModal
		if (selected != null) {
			setShowModal((prev) => {
				setFrozen(!prev);
				if (prev) { // EXIT MODAL
					playingSpectro.current = null;
					return false;
				} else { // SHOW MODAL
					setMouseControl(false);
					if (playingSpectro.current != null) {
						spectrograms.current[playingSpectro.current].pause();
					}
					return true;
				}
			});
		}		
	}, [selected, frozen]);

	useEffect(() => {
		if (showModal) {
			document.getElementById("container").classList.add(styles.noInteraction);
		} else {
			document.getElementById("container").classList.remove(styles.noInteraction);
		}
	}, [showModal]);


	// MENU

	const nextPage = () => {
		if (currentPage < totalPages) {
			setCurrentPage((prev) => Math.min(prev + 1, totalPages));
			setForceReloadKey((prev) => prev + 1);
		}
	}
	const prevPage = () => {
		if (currentPage > 1) {
			setCurrentPage((prev) => Math.max(prev - 1, 1));
			setForceReloadKey((prev) => prev + 1);
		}
	}
	const saveToJSON = async () => {
		var obj : SaveData = { table: [] };
		for (let i = 0; i < audioFiles.length; i++) {
			const save = audioFiles[i];
			obj.table.push({filePath: save.filePath, status: save.status});
		}
		var json = JSON.stringify(obj);

		const filePath = await window.ipc.invoke('save-dialog', null);
		if (filePath) {
			await window.ipc.send("save-file", {filename: filePath, content: json});
		}
	}
	useEffect(() => {
        window.ipc.on("save-file-success", (_event, msg) => console.log("success: ", msg));
        window.ipc.on("save-file-error", (_event, msg) => console.log("error: ", msg));
    }, []);


	// ACTIONS

	const moveSelectionUp = () => { setMouseControl(false); updateSelected(selected==null ? 0 : Math.max(selected - COLS, selected % COLS)); }
	const moveSelectionDown = () => { setMouseControl(false); updateSelected(selected==null ? 0 : Math.min(selected + COLS, numFiles-1, numSpots-COLS+(selected % COLS))); }
	const moveSelectionLeft = () => { setMouseControl(false); updateSelected(selected==null ? 0 : Math.max(selected - 1, 0)); }
	const moveSelectionRight = () => { setMouseControl(false); updateSelected(selected==null ? 0 : Math.min(selected + 1, numFiles-1)); }
	const setSpectroStatus = (status) => { 
		updateAudioFile(spectrograms.current[selected].fullIndex, status)
		if (selected != null) {spectrograms.current[selected].setStatus(status);}; 
		if (showModal) {spectrograms.current[-1].setStatus(status);}
	}
	const playPauseSelection = () => { 
		if (selected == null) { return }; // null
		if (playingSpectro.current != null && playingSpectro.current != selected) { spectrograms.current[playingSpectro.current].pause(); }; // pause existing
		
		const id = showModal ? -1 : selected;

		spectrograms.current[id].setPlaybackRate(playSpeed); // set speed of selected
		const isPlaying = spectrograms.current[id].playPause(); // play/pause selected
		playingSpectro.current = (isPlaying ? selected : null);
	}
	const skipBack = () => { if (selected != null) {spectrograms.current[showModal ? -1 : selected].skip(-skipInterval);}; }
	const skipForward = () => { if (selected != null) {spectrograms.current[showModal ? -1 : selected].skip(skipInterval);}; } 
	const doubleSkipInterval = () => { setSkipInterval((prev) => Math.min(prev*2, MAX_SKIPINTERVAL)) } 
	const halveSkipInterval = () => { setSkipInterval((prev) => Math.max(prev/2, MIN_SKIPINTERVAL)) } 
	const doublePlaySpeed = () => { 
		setPlaySpeed((prev) => {
			let p = Math.min(MAX_PLAYSPEED, prev*2); 
			if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(p)}; 
			return p;
		}); 
	}
	const halvePlaySpeed = () => { 
		setPlaySpeed((prev) => {
			let p = Math.max(MIN_PLAYSPEED, prev/2); 
			if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(p)}; 
			return p;
		}); 
	}
	const resetIncrements = () => { 
		setSkipInterval(DEFAULT_SKIPINTERVAL); 
		setPlaySpeed(DEFAULT_PLAYSPEED); 
		if (playingSpectro.current != null) {spectrograms.current[playingSpectro.current].setPlaybackRate(DEFAULT_PLAYSPEED)}; 
	}
	const moreColumns = () => {
		setCOLS((prev) => {return Math.min(prev+1, MAX_COLUMNS)});
	}
	const lessColumns = () => {
		setCOLS((prev) => {return Math.max(prev-1, MIN_COLUMNS)});
	}

	const keybinds = {
		"w": moveSelectionUp,
		"a": moveSelectionLeft,
		"s": moveSelectionDown,
		"d": moveSelectionRight,
		"z": () => {setSpectroStatus(SpectroStatus.Unverified)},
		"x": () => {setSpectroStatus(SpectroStatus.Valid)},
		"c": () => {setSpectroStatus(SpectroStatus.Invalid)},
		" ": playPauseSelection,
		",": skipBack,
		".": skipForward,
		"l": doubleSkipInterval,
		"k": halveSkipInterval,
		"m": doublePlaySpeed,
		"n": halvePlaySpeed,
		";": lessColumns,
		"'": moreColumns,
		"r": resetIncrements,
		"o": toggleModal,
		"Enter": nextPage,
		"Backspace": prevPage,
	}

	useEffect(() => { // handle keyboard input
		const handleKeyDown = (event) => {
			if (event.key == " ") {
				event.preventDefault(); 
			}
			//console.log(event.key);
			const func = keybinds[event.key];				
			if (func) {
				func();
			}
		};

		window.addEventListener("keydown", handleKeyDown);
		return () => window.removeEventListener("keydown", handleKeyDown);
	}, [selected, playingSpectro, playSpeed, skipInterval, frozen]);
	

	// <input type="file" accept=".mp4, .wav, .txt, .json" className={styles.hiddenInputFile} multiple onChange={handleFileSelection}/>
	return (
		<React.Fragment>
			<Head>
				<title>Verify Page</title>
			</Head>
			<div id="container" className={styles.container} onMouseMove={() => {if (!frozen) setMouseControl(true)}}>
				<div className = {styles.verifyButtonMenu}>

					<label className={styles.pickFiles} onClick={handleFileSelectionNew}>
						<p>Select files</p>
					</label> 
					{audioFiles.length > 0 && (
						<>
							<div className={styles.smallContainer}>
								<p style={{ margin: '5px 0px' }}>Save</p>

								<div className={styles.save} onClick={saveToJSON}>
									<Image
									src="/images/database.png"
									alt="Save to JSON"
									width={30}
									height={30}
									/>
								</div>
							</div>

							<div className={styles.smallContainer}>
								<p>Page: {`${currentPage} / ${totalPages}`}</p>

								<div 
								style={{ overflow: 'hidden', display: 'flex', alignItems: 'center' }} 
								className={styles.smallContainerRow}
								>
									<div className={currentPage>1 ? styles.prevFiles : styles.disabled} onClick={prevPage}>
										<Image
										src="/images/LArrow.png"
										alt="Previous files"
										width={20}
										height={20}
										style={{ display: 'block' }}
										/>
									</div>	
									<div className={currentPage<totalPages ? styles.nextFiles : styles.disabled} onClick={nextPage}>
										<Image
										src="/images/RArrow.png"
										alt="Next files"
										width={20}
										height={20}
										style={{ display: 'block' }}
										/>
									</div>
								</div>
							</div>
						</>
					)}
					
					<div className={styles.smallContainer}>
						<p>Skip Interval: {skipInterval}</p>
						<div className={styles.smallContainerRow}>
							<button onClick={halveSkipInterval}>-</button>
							<button onClick={doubleSkipInterval}>+</button>
						</div>
					</div>
					
					<div className={styles.smallContainer}>
						<p>Playback Speed: {playSpeed}</p>
						<div className={styles.smallContainerRow}>
							<button onClick={halvePlaySpeed}>-</button>
							<button onClick={doublePlaySpeed}>+</button>
						</div>
					</div>

					<div className={styles.smallContainer}>
						<p>COLUMNS: {COLS}</p>
						<div className={styles.smallContainerRow}>
							<button onClick={lessColumns}>-</button>
							<button onClick={moreColumns}>+</button>
						</div>
					</div>

					<div>
						<p>Selected: {spectrograms.current[selected]?.fullIndex+1 || "none"}</p>
					</div>
				</div>

				{audioFiles.length > 0 && (
					<>
						<div id="grid" key={forceReloadKey} className={styles.grid} style={{
							gridTemplateColumns: `repeat(${COLS}, 1fr)`,
							gridTemplateRows: `repeat(${ROWS}, auto)`,
						}}>
							{currentFiles.map(({index, filePath, url, status}, i) => {
								return (
									<Spectrogram 
										key={i}
										id={i} 
										fullIndex={index}
										url={url} 
										filePath={filePath}
										status={status}
										onMouseEnter={() => {
											if (mouseControl) {
												updateSelected(i);
											}
										}}
										onMouseLeave={() => {
											if (mouseControl) {
												updateSelected(null);
											}
										}}
										linkedSpectro={null}
										ref={(el) => {
											if (el) spectrograms.current[i] = el; // Populate dynamically
										}}
									/>
								)
							})}
						</div>
					</>
				)}

				<>
					{showModal && 	
						createPortal(
							<ModalSpectrogram
								key={-1}
								id={-1} 
								fullIndex={-1}
								url={spectrograms.current[selected].url} 
								status={spectrograms.current[selected].status} 
								onMouseEnter={()=>{}}
								onMouseLeave={()=>{}}
								linkedSpectro={spectrograms.current[selected]}
								ref={(el) => {
									if (el) spectrograms.current[-1] = el; // Populate dynamically
								}}
								toggleModal={toggleModal}
							/>,
							document.body
						)
					}
				</>
			</div>
		</React.Fragment>
	)
}