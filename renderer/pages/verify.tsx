import React, { useState, useRef, useEffect, MouseEvent } from 'react'
import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image'
import styles from './verify.module.css'
import WaveSurfer from 'wavesurfer.js';
import SpectrogramPlugin from 'wavesurfer.js/dist/plugins/spectrogram';


const FILES_PER_PAGE = 10; // corresponds to grid in css styles

// GENERATED BY CHAT GPT
function createViridisColorMap() {
    // Predefined Viridis colormap (256 RGB values)
    const viridisColors = [
        [68, 1, 84], [72, 35, 116], [64, 67, 135], [52, 94, 141],
        [41, 120, 142], [32, 144, 140], [34, 167, 132], [58, 190, 117],
        [96, 208, 93], [140, 219, 69], [186, 226, 54], [233, 229, 42], [253, 231, 37]
    ];

    const colorMap = [];

    for (let i = 0; i < 256; i++) {
        // Interpolate between the predefined colors
        const t = i / 255;
        const idx = Math.floor(t * (viridisColors.length - 1));
        const nextIdx = Math.min(idx + 1, viridisColors.length - 1);
        const mix = (t * (viridisColors.length - 1)) % 1;

        const r = Math.floor((1 - mix) * viridisColors[idx][0] + mix * viridisColors[nextIdx][0]);
        const g = Math.floor((1 - mix) * viridisColors[idx][1] + mix * viridisColors[nextIdx][1]);
        const b = Math.floor((1 - mix) * viridisColors[idx][2] + mix * viridisColors[nextIdx][2]);

        //colorMap[i] = [r/256, g/256, b/256, 1];
		colorMap.push([r/256, g/256, b/256, 1]);
    }

    return colorMap;
}

const SideBar = () => { 
	const toHome = () => {
		window.location.href = '/home';
	};
	const toData = () => {
		window.location.href = '/next';
	};
	const toModel = () => {
		window.location.href = '/model';
	};
	const toLabel = () => {
		window.location.href = '/label';
	};
	const toVerify = () => {
		window.location.href = '/verify';
	};

	return <div>
		<div className={styles.home} onClick={toHome}>
			<Image
			src="/images/home.png"
			alt="Home image"
			width={45}
			height={45}
			/>
			<br />
			<Link href="/home">
			<span className={styles.linkStyle}>Home</span>
			</Link>
		</div>
		<div className={styles.database} onClick={toData}>
			<Image
			src="/images/database.png"
			alt="Database image"
			width={45}
			height={45}
			/>
			<br />
			<Link href="/next">
			<span className={styles.linkStyle}>Database</span>
			</Link>
		</div>
		<div className={styles.model} onClick={toModel}>
			<Image
			src="/images/model.png"
			alt="Model image"
			width={45}
			height={45}
			/>
			<br />
			<Link href="/model">
			<span className={styles.linkStyle}>Model</span>
			</Link>
		</div>
		<div className={styles.label} onClick={toLabel}>
			<Image
			src="/images/tag.png"
			alt="Label image"
			width={45}
			height={45}
			/>
			<br />
			<Link href="/label">
			<span className={styles.linkStyle}>Label</span>
			</Link>
		</div>


		<div className={styles.verify} onClick = {toVerify}>
			<Image
			src="/images/verify.png"
			alt="Verify image"
			width={45}
			height={45}
			/>
			<br />
			<Link href="/verify">
			<span className={styles.linkStyle}>Verify</span>
			</Link>
		</div>
		
	</div>
}

const spectrogramCache: Record<string, WaveSurfer> = {}
const spectrograms = []
const Spectrogram = ({id, filePath, onMouseEnter, onMouseLeave}) => {
	const wavesurferRef = useRef(null);
	const containerRef = useRef(null);
	const innerRef = useRef(null);
	const [isRed, setIsRed] = useState(false);
	const [isSelected, setIsSelected] = useState(false);
	const [isLoaded, setIsLoaded] = useState(false);

	const toggleRed = () => {
		setIsRed(prev => !prev);
	};
	const toggleSelected = (S) => {
		setIsSelected(S);
	};

	useEffect(() => {
		console.log(wavesurferRef.current);
		if (spectrogramCache[filePath] && false) {
			wavesurferRef.current = spectrogramCache[filePath];
			console.log("RETRIEVING " + filePath);
            setIsLoaded(true);
		} else {
			if (!wavesurferRef.current) {;
				wavesurferRef.current = WaveSurfer.create({
					container: innerRef.current,//`#waveform-${id}`,
					height: 0,
					fillParent: true,
				});
				wavesurferRef.current.registerPlugin(
					SpectrogramPlugin.create({
						colorMap: createViridisColorMap(),
						height: 128,
						fftSamples: 256,
					}),
				)

				wavesurferRef.current.load(filePath);
				wavesurferRef.current.on('ready', function() {
					document.getElementById(`loading-spinner-${id}`).style.display = 'none';
					setIsLoaded(true);
					console.log(id);
				});
			}
		}

		spectrograms[id] = {
			ws: wavesurferRef.current,
			container: innerRef.current,
			isRed: isRed,
			toggleRed: toggleRed,
			toggleSelected: toggleSelected,
		};
		//spectrogramCache[filePath] = wavesurferRef.current;

		return () => { 
			wavesurferRef.current.destroy(); // crucial
			//const cachedWaveSurfer = spectrogramCache[filePath];

		};
	}, []);

	// left click reposition functionality already handled by wavesurfer
	const rightClickPlayPause = (e: MouseEvent) => { // play/pause on right click
		e.preventDefault();
		wavesurferRef.current.playPause();
	}

	return (
		<div 
			key={id} 
			className={`
				${styles.waveContainer} 
				${isLoaded && (isRed ? styles.redOutline : styles.greenOutline)}
				${isLoaded && (isSelected ? styles.selectOutline : styles.unselectOutline)}
			`}
			ref={containerRef}
			onMouseEnter={onMouseEnter}
			onMouseLeave={onMouseLeave}
		>
			<div id={`loading-spinner-${id}`} className={styles.waveLoadingCircle}></div>
			<div 
				id={`waveform-${id}`} 
				ref={innerRef}
				style={{ width: "100%", height: "128px"}} 
				onContextMenu={rightClickPlayPause}
			></div>
		</div>	
	)
}

export default function VerifyPage() {	
	const [audioFiles, setAudioFiles] = useState([]);
	const [currentPage, setCurrentPage] = useState(1);
	const [forceReloadKey, setForceReloadKey] = useState(0);

	const handleFileSelection = (event) => {
        const selectedFiles = Array.from(event.target.files).map((file: File) => URL.createObjectURL(file));
        setAudioFiles(selectedFiles);
        setCurrentPage(1); // Reset to first page
        setForceReloadKey(prev => prev + 1); // Force re-render
    };

	const totalPages = Math.ceil(audioFiles.length / FILES_PER_PAGE);
	const currentFiles = audioFiles.slice((currentPage-1)*FILES_PER_PAGE, (currentPage)*FILES_PER_PAGE); 
	const nextPage = () => {
		if (currentPage < totalPages) {
			setCurrentPage((prev) => Math.min(prev + 1, totalPages));
			setForceReloadKey((prev) => prev + 1);
		}
	}
    const prevPage = () => {
		if (currentPage > 1) {
			setCurrentPage((prev) => Math.max(prev - 1, 1));
			setForceReloadKey((prev) => prev + 1);
		}
	}

	const [activeSpectrogram, setActiveSpectrogram] = useState(null);
	useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.code === "Space" && activeSpectrogram !== null) {
				event.preventDefault(); 
				setActiveSpectrogram(activeSpectrogram);
				spectrograms[activeSpectrogram].toggleRed();
			}
        };

        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
    }, [activeSpectrogram]);
	
	return (
		<React.Fragment>
			<Head>
				<title>Verify Page</title>
			</Head>
			<div className ={styles.container}>
				<SideBar/>

				<input type="file" multiple onChange={handleFileSelection} />

				{audioFiles.length > 0 && (
					<>
						<div key={forceReloadKey} className={styles.grid}>
							{currentFiles.map((filePath, i) => (
								<Spectrogram 
									key={i}
									id={i} 
									filePath={filePath} 
									onMouseEnter={() => {
										setActiveSpectrogram(i);
										if (spectrograms[i]) {
											spectrograms[i].toggleSelected(true);
										}
									}}
									onMouseLeave={() => {
										setActiveSpectrogram(null);
										if (spectrograms[i]) {
											spectrograms[i].toggleSelected(false);
										}
									}}
								/>
							))}
						</div>

						<div className={styles.nextFiles} onClick={nextPage}>
							<Image
							src="/images/RArrow.png"
							alt="Next files"
							width={45}
							height={45}
							/>
							<br />
						</div>
						<div className={styles.prevFiles} onClick={prevPage}>
							<Image
							src="/images/LArrow.png"
							alt="Previous files"
							width={45}
							height={45}
							/>
							<br />
						</div>
					</>
				)}
			</div>
		</React.Fragment>
	)
}